<?xml version='1.0'?>
<!DOCTYPE set PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<set>
	<title>PHP-Sugar</title>
	<book>
		<title>PHP-Sugar Syntax</title>
		<preface>
			<title>Introduction</title>
			<para>PHP-Sugar is a PHP templating engine aimed at being powerful, easy and safe to use, and fast.</para>
		</preface>
		<chapter>
			<title>Templates</title>
			<para>PHP-Sugar process template files, which generally end in the <filename>.tpl</filename> extension.  Template files are mostly regular HTML, with special markup for Sugar expressions.</para>
			<para>Sugar markup is any code within the <code>{%</code> and <code>%}</code> delimiters.  For example,</para>
			<example>
				<title>Sugar markup</title>
				<programlisting language="xhtml"><![CDATA[<p>The foo variable is: {% $foo %}</p>]]></programlisting>
			</example>
			<para>In that example, the Sugar code <code>$foo</code> is processed by the template engine, and the rest of the text outside of the delimiters is displayed unchanged.</para>
			<para>Template files are usually located in the <filename>./templates/</filename> directory relative to the PHP script invoked by the user.  This can be changed using the <varname>Sugar::templateDir</varname> member variable.</para>
		</chapter>
		<chapter>
			<title>Statements</title>
			<para>Sugar markup consists of statements.  There are several different kinds of statements within PHP-Sugar.</para>
			<section>
				<title>Expression statements</title>
				<para>The most common statement is the expression, which is a simple variable name or operator applied to variables which are then displayed in the output.</para>
				<example>
					<title>Sugar expressions</title>
					<programlisting>$foo                // the variable foo
$foo + 5            // foo plus 5
4 * ( 7 - -4 ) / 2  // 22
"see jane run"      // a string</programlisting>
				</example>
				<para>See the chapter on Expressions for more information on what you can do inside of an expression statement.</para>
			</section>
			<section>
				<title>Function statements</title>
				<para>The second most common statement is the function call.  A function call is a way for a template to invoke PHP code within the application for performing more complex formatting and data processing.  The function call result is displayed in the output.  Function calls consist of a function name and any number of parameters.  Parameters are a parameter name, an equals sign (<code>=</code>), and then an expression.</para>
				<example>
					<title>Function calls</title>
					<programlisting>foo
foo param=$bar
foo param1="a string" param2=$bar
foo param1=$bar param2=5*5</programlisting>
				</example>
			</section>
			<section>
				<title>If statements</title>
				<para>The <code>if</code> statment is used to conditional show a part of a template.  For example, if a part of a template should only be shown if <varname>$foo</varname> is equal to 5, then the following could be done:</para>
				<example>
					<title>Simple if</title>
					<programlisting>{% if $foo == 5 %}
	Foo is equal to five
{% end %}</programlisting>
				</example>
				<para>It is also possible to have a part of a template only shown if the test fails, using the <code>else</code> statement within an <code>if</code> statement.</para>
				<example>
					<title>Simple if-else</title>
					<programlisting>{% if $foo == 5 %}
	Foo is equal to five
{% else %}
	Foo is not five
{% end %}</programlisting>
				</example>
				<para>It is also possible to chain multiple <code>if</code> statements together using the <code>elif</code> statement.  Each statement is tried until one succeeds.  If none of them succeed, then the <code>else</code> statement (if present) is executed.</para>
				<example>
					<title>If-elif-else</title>
					<programlisting>{% if $foo == 5 %}
	Foo is equal to five
{% elif $foo > 5 %}
	Foo is greater than five
{% else %}
	Foo is less than five
{% end %}</programlisting>
				</example>
			</section>
			<section>
				<title>Loop statements</title>
				<para>The <code>loop</code> statement allows you to iterate over a series of numbers, increasing or decreasing, by any step.  The <code>loop</code> statement takes either two or three parameters.  The third optional parameter is the step value, which is 1 if unspecified</para>
				<para>You also must provide a variable name which will be set to the loop's current iteration value.</para>
				<example>
					<title>Loop statement</title>
					<programlisting><![CDATA[{% loop $number in 1,10,2 %}
	{% $number %}<br />
{% end %}]]></programlisting>
					<para>The above code will print out:</para>
					<programlisting>1
3
5
7
9</programlisting>
				</example>
			</section>
			<section>
				<title>Foreach statements</title>
				<para>The <code>foreach</code> statement is very similar to the <code>loop</code> statement, except it iterates over the value of an array instead of a series of numbers.  Both indexed and associative arrays can be used.  The statement is given one or two variable names.  If only one is given, the array value will be assigned to it.  If two are given, the array key is given to the first and the value is given to the second.</para>
				<example>
					<title>Foreach loop</title>
					<programlisting><![CDATA[{% foreach $value in [1,2,3] %}
	{% $value %}<br />
{% end %}]]></programlisting>
					<para>The above code will print out:</para>
					<programlisting>1
2
3</programlisting>
				</example>
				<example>
					<title>Foreach loop with keys</title>
					<para>The variable $array was assigned in PHP with array('foo'=>100, 'bar'=>200, 'baz'=>300).</para>
					<programlisting><![CDATA[
{% foreach $key,$value in $array %}
	{% $key %} is {% $value %}<br />
{% end %}]]></programlisting>
					<para>The above code will print out:</para>
					<programlisting>foo is 100
bar is 200
baz is 300</programlisting>
				</example>
			</section>
		</chapter>
		<chapter>
			<title>Expressions</title>
			<para>PHP-Sugar offers fairly extensive support for code expressions within templates.  Expressions include many arithmetic operators, logical and comparison operators, and array/object lookup operators.</para>
			<para>Expressions should look pretty similar to PHP expressions, which a few key differences.</para>
			<para>Expression statements will always escape the expression's value according to the configurable escape mode of PHP-Sugar.  You will need to use a function call in order to display an expression without any escaping.</para>
			<section>
				<title>Values</title>
				<para>A value an expression which is any number, string literal, or one of the keywords true, false, or null.</para>
				<example>
					<title>Values</title>
					<programlisting>42           // a number
"some text"  // a string
true         // boolean
null         // null value</programlisting>
				</example>
			</section>
			<section>
				<title>Variables</title>
				<para>A variable is a name which can store a value inside of it.  A variable can be defined from within the PHP application or within a template file.  Any value can be stored inside of variable, including numbers, strings, booleans, arrays, and PHP objects.</para>
				<para>A variable is accessed using the variable's name preceded with a dollar sign (<code>$</code>).  A variable is assigned by using an assignment statement, which is the variable, following by an equals sign (<code>=</code>), and then an expression.</para>
				<example>
					<title>Variable assignment</title>
					<programlisting>$foo = 5
$foo = "a string"
$foo = [1, 2, 3]</programlisting>
				</example>
			</section>
			<section>
				<title>Arithmetic</title>
				<para>The arithmetic operators supportd by PHP-Sugar are add, subtract, multiply, divide, modulus, and negate.  The operators all support standard operator precedence; that is, multiplies will be done before additions, and so on.</para>
				<para>Grouping by way of parenthesis is also supported.</para>
				<example>
					<title>Arithmetic operators</title>
					<programlisting>1 + 4        // 5
8 * 4        // 32
1 + 5 * 4    // 21
5 + -7       // -2
5 * (1 + 4)  // 25</programlisting>
				</example>
			</section>
			<section>
				<title>String concatenation</title>
				<para>Two strings can be concatenated (added) together using the string concatenation operator, <code>..</code>.  It is also possible to use the regular arithmetic addition operator <code>+</code>, although that may have an undesired effect if both strings represent valid numbers, as the result will then be the sum of those numbers instead of a concatenated string.</para>
				<para>Note that the concatenation operator is two dots, not one like PHP.  The single dot operator in Sugar markup is reserved for array and object lookup.</para>
			</section>
			<section>
				<title>Comparisons</title>
				<para>All basic comparison operators are supported.  Additionally, there are two comparison operators for arrays, <code>in</code> and <code>!in</code>, which check if an element is in or not within an array, respectively.</para>
				<para>The other comparison operators are <code>&lt;</code> (less than), <code>&lt;=</code> (less than or equal to), <code>&gt;</code> (greater than), <code>&gt;=</code> (greater than or equal to), <code>==</code> (equals), and <code>!=</code> (not equals)</para>
				<para>These operators are mostly useful inside of <code>if</code> statements.</para>
			</section>
			<section>
				<title>Logical operators</title>
				<para>PHP-Sugar supports the logical operators AND, OR, and NOT.  AND is represented using either <code>and</code> or <code>&amp;&amp;</code>.  OR is represented using either <code>or</code> or <code>||</code>.  Not is represented using <code>!</code>.</para>
			</section>
			<section>
				<title>Array construction</title>
				<para>Arrays can be created within templates using the array construction expression.  These are made using a left square bracket (<code>[</code>), followed by zero or more expressions separated by commas, followed by a right square bracket (<code>]</code>).  Indexed arrays can be created, but not associative arrays.</para>
				<example>
					<title>Array construction</title>
					<programlisting>[1, 2, 3]
["foo", "bar", "baz"]
[42, "string", $foo]</programlisting>
				</example>
			</section>
			<section>
				<title>Array and object lookup</title>
				<para>The values within arrays or objects can be retrieved using the lookup operator, which is a single dot (<code>.</code>) followed by a name or number.  The name is used as the array key or index for arrays and as a member variable name for objects.  The name is only a single name (letters, numbers, and underscores, not starting with a number) or a single number, and not a full expression.</para>
				<para>A second syntax can be used when you want to use an expression as in the lookup.  This syntax is equivalent to PHP's array lookup syntax.  It is the array or object expression being queries, followed by a left square bracket (<code>[</code>), followed by the expression to lookup, followed by a right square bracket (<code>]</code>).</para>
				<example>
					<title>Array and object lookup</title>
					<programlisting>$array.key
$object.member
$array['key']
$array[$foo]
$array[$i + 1]
$object[function param=1]</programlisting>
				</example>
			</section>
		</chapter>
		<chapter>
			<title>Functions</title>
			<para>ok</para>
		</chapter>
	</book>
	<book>
		<title>PHP-Sugar API</title>
		<preface>
			<title>Introduction</title>
			<para>ok</para>
		</preface>
		<chapter>
			<title>Sugar object</title>
			<para>ok</para>
		</chapter>
		<chapter>
			<title>Variables</title>
			<para>ok</para>
		</chapter>
		<chapter>
			<title>Functions</title>
			<para>ok</para>
		</chapter>
		<chapter>
			<title>Configuration</title>
			<para>ok</para>
		</chapter>
		<chapter>
			<title>Cache handlers</title>
			<para>ok</para>
		</chapter>
		<chapter>
			<title>Escaped strings</title>
			<para>ok</para>
		</chapter>
		<chapter>
			<title>Utility library</title>
			<para>ok</para>
		</chapter>
	</book>
	<book>
		<title>Template Function Reference</title>
		<preface>
			<title>Introduction</title>
			<para>ok</para>
		</preface>
	</book>
</set>
<!-- vim: set ts=2 sw=2 : -->
